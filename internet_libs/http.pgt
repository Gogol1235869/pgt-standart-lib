import start

function(HTTP) {
    give()::{
        if (Protocol == "GET") {
        return HTTPResponse(200, "Hello, World!");
        li [
            Method = "GET"
            URL = "http://www.example.com"
            IP = "127.0.0.1"
            Port = 80
        ]
        vg (GET) {
            Method = "GET"
            URL = "http://www.example.com"
            IP = "127.0.0.1"
            Port = 80
            }

        li [
                return HTTPResponse(200, "Hello, World!");
                return HTTPResponse(206, "Partial Content");
                return HTTPResponse(301, "Moved Permanently");
                return HTTPResponse(302, "Found");
                return HTTPResponse(303, "See Other");
                return HTTPResponse(304, "Not Modified");
                return HTTPResponse(306, "Unused");
                return HTTPResponse(307, "Temporary Redirect");
                return HTTPResponse(400, "Bad Request");
                return HTTPResponse(404, "Not Found");
                return HTTPResponse(405, "Method Not Allowed");
                return HTTPResponse(406, "Not Acceptable");
                return HTTPResponse(407, "Proxy Authentication Required");
                return HTTPResponse(408, "Request Time-out");
                return HTTPResponse(409, "Conflict");
                return HTTPResponse(410, "Gone");
                return HTTPResponse(411, "Length Required");
                return HTTPResponse(412, "Precondition Failed");
                return HTTPResponse(413, "Request Entity Too Large");
                return HTTPResponse(414, "Request-URI Too Large");
                return HTTPResponse(415, "Unsupported Media Type");
                return HTTPResponse(416, "Requested Range Not Satisfiable");
                return HTTPResponse(417, "Expectation Failed");
                return HTTPResponse(500, "Internal Server Error");
                return HTTPResponse(501, "Not Implemented");
                return HTTPResponse(502, "Bad Gateway");
                return HTTPResponse(503, "Service Unavailable");
                return HTTPResponse(504, "Gateway Time-out");
                return HTTPResponse(505, "HTTP Version Not Supported");
        ]
        }
    exit::();
    }
}

function (HTTP) {
    give()::{
        protocol = "POST";
            li [
                return HTTPResponse(200, "Hello, World!");
                return HTTPResponse(206, "Partial Content");
                return HTTPResponse(301, "Moved Permanently");
                return HTTPResponse(302, "Found");
                return HTTPResponse(303, "See Other");
                return HTTPResponse(304, "Not Modified");
                return HTTPResponse(306, "Unused");
                return HTTPResponse(307, "Temporary Redirect");
                return HTTPResponse(400, "Bad Request");
                return HTTPResponse(404, "Not Found");
                return HTTPResponse(405, "Method Not Allowed");
                return HTTPResponse(406, "Not Acceptable");
                return HTTPResponse(407, "Proxy Authentication Required");
                return HTTPResponse(408, "Request Time-out");
                return HTTPResponse(409, "Conflict");
                return HTTPResponse(410, "Gone");
                return HTTPResponse(411, "Length Required");
                return HTTPResponse(412, "Precondition Failed");
                return HTTPResponse(413, "Request Entity Too Large");
                return HTTPResponse(414, "Request-URI Too Large");
                return HTTPResponse(415, "Unsupported Media Type");
                return HTTPResponse(416, "Requested Range Not Satisfiable");
                return HTTPResponse(417, "Expectation Failed");
                return HTTPResponse(500, "Internal Server Error");
                return HTTPResponse(501, "Not Implemented");
                return HTTPResponse(502, "Bad Gateway");
                return HTTPResponse(503, "Service Unavailable");
                return HTTPResponse(504, "Gateway Time-out");
                return HTTPResponse(505, "HTTP Version Not Supported");
            ]

    }
    exit::();
}

Class HTTP {
    give()::{
        protocol = "GET";
        li [
            200,
            206,
            301,
            302,
            303,
            304,
            306,
            307,
            400,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            500,
            501,
            502,
            503,
            504,
            505
        ]
        vg (HTTP) {
            protocol = "GET";   
            status = 200;
            headers = li [ "Content-Type", "text/html" ];
            body = "Hello, World!";

            status = 206;
            headers = li [ "Content-Type", "text/html" ];
            body = "Partial Content";

            status = 301;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Moved Permanently";

            status = 302;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Found";

            status = 303;
            headers = li [ "Location", "http://www.example.com" ];
            body = "See Other";

            status = 304;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Modified";

            status = 306;
            headers = li [ "Content-Type", "text/html" ];
            body = "Unused";

            status = 307;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Temporary Redirect";

            status = 400;
            headers = li [ "Content-Type", "text/html" ];
            body = "Bad Request";

            status = 404;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Found";

            status = 405;
            headers = li [ "Content-Type", "text/html" ];
            body = "Method Not Allowed";

            status = 406;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Acceptable";

            status = 407;
            headers = li [ "Content-Type", "text/html" ];
            body = "Proxy Authentication Required";

            status = 408;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request Time-out";

            status = 409;
            headers = li [ "Content-Type", "text/html" ];
            body = "Conflict";

            status = 410;
            headers = li [ "Content-Type", "text/html" ];
            body = "Gone";

            status = 411;
            headers = li [ "Content-Type", "text/html" ];
            body = "Length Required";

            status = 412;
            headers = li [ "Content-Type", "text/html" ];
            body = "Precondition Failed";

            status = 413;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request Entity Too Large";

            status = 414;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request-URI Too Large";

            status = 415;
            headers = li [ "Content-Type", "text/html" ];
            body = "Unsupported Media Type";

            status = 416;
            headers = li [ "Content-Type", "text/html" ];
            body = "Requested Range Not Satisfiable";

            status = 417;
            headers = li [ "Content-Type", "text/html" ];
            body = "Expectation Failed";

            status = 500;
            headers = li [ "Content-Type", "text/html" ];
            body = "Internal Server Error";

            status = 501;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Implemented";

            status = 502;
            headers = li [ "Content-Type", "text/html" ];
            body = "Bad Gateway";

            status = 503;
            headers = li [ "Content-Type", "text/html" ];
            body = "Service Unavailable";

            status = 504;
            headers = li [ "Content-Type", "text/html" ];
            body = "Gateway Time-out";

            status = 505;
            headers = li [ "Content-Type", "text/html" ];
            body = "HTTP Version Not Supported";
        }
    }
    exit::();
}

Class http {
    give::()::{
        protocol = "POST";
            li [
                200,
                206,
                301,
                302,
                303,
                304,
                306,
                307,
                400,
                404,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                500,
                501,
                502,
                503,
                504,
                505
            ]
        vg (HTTP) {
            protocol = "POST";   
            status = 200;
            headers = li [ "Content-Type", "text/html" ];
            body = "Hello, World!";

            status = 206;
            headers = li [ "Content-Type", "text/html" ];
            body = "Partial Content";

            status = 301;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Moved Permanently";

            status = 302;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Found";

            status = 303;
            headers = li [ "Location", "http://www.example.com" ];
            body = "See Other";

            status = 304;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Modified";

            status = 306;
            headers = li [ "Content-Type", "text/html" ];
            body = "Unused";

            status = 307;
            headers = li [ "Location", "http://www.example.com" ];
            body = "Temporary Redirect";

            status = 400;
            headers = li [ "Content-Type", "text/html" ];
            body = "Bad Request";

            status = 404;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Found";

            status = 405;
            headers = li [ "Content-Type", "text/html" ];
            body = "Method Not Allowed";

            status = 406;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Acceptable";

            status = 407;
            headers = li [ "Content-Type", "text/html" ];
            body = "Proxy Authentication Required";

            status = 408;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request Time-out";

            status = 409;
            headers = li [ "Content-Type", "text/html" ];
            body = "Conflict";

            status = 410;
            headers = li [ "Content-Type", "text/html" ];
            body = "Gone";

            status = 411;
            headers = li [ "Content-Type", "text/html" ];
            body = "Length Required";

            status = 412;
            headers = li [ "Content-Type", "text/html" ];
            body = "Precondition Failed";

            status = 413;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request Entity Too Large";

            status = 414;
            headers = li [ "Content-Type", "text/html" ];
            body = "Request-URI Too Large";

            status = 415;
            headers = li [ "Content-Type", "text/html" ];
            body = "Unsupported Media Type";

            status = 416;
            headers = li [ "Content-Type", "text/html" ];
            body = "Requested Range Not Satisfiable";

            status = 417;
            headers = li [ "Content-Type", "text/html" ];
            body = "Expectation Failed";

            status = 500;
            headers = li [ "Content-Type", "text/html" ];
            body = "Internal Server Error";

            status = 501;
            headers = li [ "Content-Type", "text/html" ];
            body = "Not Implemented";

            status = 502;
            headers = li [ "Content-Type", "text/html" ];
            body = "Bad Gateway";

            status = 503;
            headers = li [ "Content-Type", "text/html" ];
            body = "Service Unavailable";

            status = 504;
            headers = li [ "Content-Type", "text/html" ];
            body = "Gateway Time-out";

            status = 505;
            headers = li [ "Content-Type", "text/html" ];
            body = "HTTP Version Not Supported";
        }

    }
    exit::();
}

Class (html) {
    give::()::{
        html = "HTTP/1.1 " + string (status) + " " + string (reason) + "\r\n";
        html += "Content-Type: " + string (headers) + "\r\n";
        html += "\r\n";
        html += string (body);
    }
    exit::();
}

Class (server) {
    give::()::{
            html = "HTTP/1.1 200 OK\r\n";
            html += "Content-Type: text/html\r\n";
            html += "\r\n";
            html += "<html><body><h1>Hello, World!</h1></body></html>";
        vg (HTTP) {
            status = 200;
            reason = "OK";
            headers = "text/html";
            body = "Hello, World!";
        }
        else {
            html = "HTTP/1.1 404 Not Found\r\n";
            html += "Content-Type: text/html\r\n";
            html += "\r\n";
            html += "<html><body><h1>404 Not Found</h1></body></html>";
            vg (HTTP) {
                status = 404;
                reason = "Not Found";
                headers = "text/html";
                body = "404 Not Found";
            }
        }
        li (html-status) [
            html = "HTTP/1.1 " + string (status) + " " + string (reason) + "\r\n";
            html += "Content-Type: " + string (headers) + "\r\n";
            html += "\r\n";
            html += string (body);
        ]
        li (html) [
            html = "HTTP/1.1 " + string (status) + " " + string (reason) + "\r\n";
            html += "Content-Type: " + string (headers) + "\r\n";
            html += "\r\n";
            html += string (body);
        ]

        vg (HTTP) {
            status = 200;
            reason = "OK";
            status = 206;
            reason = "Partial Content";
            status = 301;
            reason = "Moved Permanently";
            status = 400;
            reason = "Bad Request";
            status = 401;
            reason = "Unauthorized";
            status = 403;
            reason = "Forbidden";
            status = 404;
            reason = "Not Found";
            status = 500;
            reason = "Internal Server Error";
        }
    }
    exit::();
}

import exit::end::();